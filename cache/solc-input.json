{
  "language": "Solidity",
  "sources": {
    "contracts/HmineMain.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.9;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract HmineMain is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct User {\r\n        string nickname;\r\n        address user;\r\n        uint256 amount;\r\n        uint256 reward;\r\n    }\r\n\r\n    // dead address to receive \"burnt\" tokens\r\n    address public constant FURNACE =\r\n        0x000000000000000000000000000000000000dEaD;\r\n\r\n    address[4] public management = [\r\n        0x5C9dE63470D0D6d8103f7c83F1Be4F55998706FC, // 0 Loft\r\n        0x2165fa4a32B9c228cD55713f77d2e977297D03e8, // 1 Ghost\r\n        0x70F5FB6BE943162545a496eD120495B05dC5ce07, // 2 Mike\r\n        0x36b13280500AEBC5A75EbC1e9cB9Bf1b6A78a95e // 3 Miko\r\n    ];\r\n\r\n    address public constant safeHolders =\r\n        0xcD8dDeE99C0c4Be4cD699661AE9c00C69D1Eb4A8;\r\n\r\n    address public bankroll = 0x25be1fcF5F51c418a0C30357a4e8371dB9cf9369; // 4 Way Multisig wallet\r\n    address public rewardGiver = 0x2165fa4a32B9c228cD55713f77d2e977297D03e8; // Ghost\r\n    address public immutable currencyToken; // Will likely be DAI\r\n    address public immutable hmineToken;\r\n\r\n    uint256 public startTime;\r\n    uint256 public index;\r\n    uint256 public totalSold; // The contract will start with 100,000 Sold HMINE.\r\n    uint256 public totalStaked; // The contract will start with 100,000 Staked HMINE.\r\n    uint256 public currentPrice = 7e18; // The price is divisible by 1e18.  So in this case 7.00 is the current price.\r\n    uint256 public constant roundIncrement = 1_000e18;\r\n    uint256 public rewardTotal;\r\n    uint256 public constant maxSupply = 200_000e18;\r\n    uint256 public constant firstRound = 100_000e18;\r\n    uint256 public constant secondRound = 101_000e18;\r\n\r\n    mapping(address => uint256) public userIndex;\r\n    mapping(uint256 => User) public users;\r\n\r\n    // The user's pending reward is user's balance multiplied by the accumulated reward per share minus the user's reward debt.\r\n    // The user's reward debt is always set to balance multiplied by the accumulated reward per share when reward's are distributed\r\n    // (or balance changes, which also forces distribution), such that the diference immediately after distribution is always zero (nothing left)\r\n    uint256 public accRewardPerShare;\r\n    mapping(address => uint256) public userRewardDebt;\r\n\r\n    modifier onlyRewardGiver() {\r\n        require(msg.sender == rewardGiver, \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    modifier isRunning(bool _flag) {\r\n        require(\r\n            (startTime != 0 && startTime <= block.timestamp) == _flag,\r\n            \"Unavailable\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address _currenctyToken, address _hmineToken) {\r\n        currencyToken = _currenctyToken;\r\n        hmineToken = _hmineToken;\r\n    }\r\n\r\n    // Start the contract.\r\n    // Will not initialize if already started.\r\n    function initialize(uint256 _startTime)\r\n        external\r\n        onlyOwner\r\n        isRunning(false)\r\n    {\r\n        startTime = _startTime;\r\n\r\n        // Admin is supposed to send an additional 100k HMINE to the contract\r\n        uint256 _balance = IERC20(hmineToken).balanceOf(address(this));\r\n        require(_balance == maxSupply, \"Missing hmine balance\");\r\n    }\r\n\r\n    // Used to initally migrate the user data from the sacrifice round. Can be run multiple times. Do 10 at a time.\r\n    function migrateSacrifice(User[] memory _users)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n        isRunning(false)\r\n    {\r\n        uint256 _amountSum = 0;\r\n        uint256 _rewardSum = 0;\r\n        for (uint256 _i = 0; _i < _users.length; _i++) {\r\n            address _userAddress = _users[_i].user;\r\n            require(_userAddress != address(0), \"Invalid address\");\r\n            require(userIndex[_userAddress] == 0, \"Duplicate user\");\r\n            uint256 _index = _assignUserIndex(_userAddress);\r\n            users[_index] = _users[_i];\r\n            _amountSum += _users[_i].amount;\r\n            _rewardSum += _users[_i].reward;\r\n        }\r\n\r\n        // Admin sends send initial token deposits to the contract\r\n        IERC20(hmineToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amountSum\r\n        );\r\n        totalSold += _amountSum;\r\n        totalStaked += _amountSum;\r\n\r\n        // Admin must send initial rewards to the contract\r\n        IERC20(currencyToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _rewardSum\r\n        );\r\n        rewardTotal += _rewardSum;\r\n\r\n        // Sanity check, pre-sale must not exceed 100k\r\n        require(totalSold <= 100_000e18, \"Migration excess\");\r\n    }\r\n\r\n    // Total liquidity of HMINE available for trades.\r\n    function hmineReserve() external view returns (uint256 _hmineReserve) {\r\n        uint256 _balance = IERC20(hmineToken).balanceOf(address(this));\r\n        return _balance - totalStaked;\r\n    }\r\n\r\n    // Total liquidity of DAI available for trades.\r\n    function currencyReserve()\r\n        external\r\n        view\r\n        returns (uint256 _currencyReserve)\r\n    {\r\n        uint256 _balance = IERC20(currencyToken).balanceOf(address(this));\r\n        return _balance - rewardTotal;\r\n    }\r\n\r\n    // Allows for withdrawing DAI liquidity.\r\n    // Admin is supposed to send the DAI liquidity directly to the contract.\r\n    function recoverReserve(uint256 _amount) external onlyRewardGiver nonReentrant {\r\n        // Checks to make sure there is enough dai on contract to fullfill the withdrawal.\r\n        uint256 _balance = IERC20(currencyToken).balanceOf(address(this));\r\n        uint256 _available = _balance - rewardTotal;\r\n        require(_amount <= _available, \"Insufficient DAI on Contract\");\r\n\r\n        // Send DAI to user.  User only get's 60% of the selling price.\r\n        IERC20(currencyToken).safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    // An external function to calculate the swap value.\r\n    // If it's a buy then calculate the amount of HMINE you get for the DAI input.\r\n    // If it's a sell then calculate the amount of DAI you get for the HMINE input.\r\n    function calculateSwap(uint256 _amount, bool _isBuy)\r\n        external\r\n        view\r\n        returns (uint256 _value)\r\n    {\r\n        (_value, ) = _isBuy ? _getBuyValue(_amount) : _getSellValue(_amount);\r\n        return _value;\r\n    }\r\n\r\n    // Input the amount a DAI and return the HMINE value.\r\n    // It takes into account the price upscale in case a round has been met during the buy.\r\n    function _getBuyValue(uint256 _amount)\r\n        internal\r\n        view\r\n        returns (uint256 _hmineValue, uint256 _price)\r\n    {\r\n        _price = currentPrice;\r\n        _hmineValue = (_amount * 1e18) / _price;\r\n        // Fixed price if below second round\r\n        if (totalSold + _hmineValue <= secondRound) {\r\n            // Increment price if second round is reached\r\n            if (totalSold + _hmineValue == secondRound) {\r\n                _price += 3e18;\r\n            }\r\n        }\r\n        // Price calculation when beyond the second round\r\n        else {\r\n            _hmineValue = 0;\r\n            uint256 _amountLeftOver = _amount;\r\n            uint256 _roundAvailable = roundIncrement -\r\n                (totalSold % roundIncrement);\r\n\r\n            // If short of first round, adjust up to first round\r\n            if (totalSold < firstRound) {\r\n                _hmineValue += firstRound - totalSold;\r\n                _amountLeftOver -= (_hmineValue * _price) / 1e18;\r\n                _roundAvailable = roundIncrement;\r\n            }\r\n\r\n            uint256 _valueOfLeftOver = (_amountLeftOver * 1e18) / _price;\r\n            if (_valueOfLeftOver < _roundAvailable) {\r\n                _hmineValue += _valueOfLeftOver;\r\n            } else {\r\n                _hmineValue += _roundAvailable;\r\n                _amountLeftOver =\r\n                    ((_valueOfLeftOver - _roundAvailable) * _price) /\r\n                    1e18;\r\n                _price += 3e18;\r\n                while (_amountLeftOver > 0) {\r\n                    _valueOfLeftOver = (_amountLeftOver * 1e18) / _price;\r\n                    if (_valueOfLeftOver >= roundIncrement) {\r\n                        _hmineValue += roundIncrement;\r\n                        _amountLeftOver =\r\n                            ((_valueOfLeftOver - roundIncrement) * _price) /\r\n                            1e18;\r\n                        _price += 3e18;\r\n                    } else {\r\n                        _hmineValue += _valueOfLeftOver;\r\n                        _amountLeftOver = 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return (_hmineValue, _price);\r\n    }\r\n\r\n    // This internal function is used to calculate the amount of DAI user will receive.\r\n    // It takes into account the price reversal in case rounds have reversed during a sell order.\r\n    function _getSellValue(uint256 _amount)\r\n        internal\r\n        view\r\n        returns (uint256 _sellValue, uint256 _price)\r\n    {\r\n        _price = currentPrice;\r\n        uint256 _roundAvailable = totalSold % roundIncrement;\r\n        // Still in current round.\r\n        if (_amount <= _roundAvailable) {\r\n            _sellValue = (_amount * _price) / 1e18;\r\n        }\r\n        // Amount plus the mod total tells us tha the round or rounds will most likely be reached.\r\n        else {\r\n            _sellValue = (_roundAvailable * _price) / 1e18;\r\n            uint256 _amountLeftOver = _amount - _roundAvailable;\r\n            while (_amountLeftOver > 0) {\r\n                if (_price > 7e18) {\r\n                    _price -= 3e18;\r\n                }\r\n                if (_amountLeftOver > roundIncrement) {\r\n                    _sellValue += (roundIncrement * _price) / 1e18;\r\n                    _amountLeftOver -= roundIncrement;\r\n                } else {\r\n                    _sellValue += (_amountLeftOver * _price) / 1e18;\r\n                    _amountLeftOver = 0;\r\n                }\r\n            }\r\n        }\r\n        return (_sellValue, _price);\r\n    }\r\n\r\n    // Buy HMINE with DAI\r\n    function buy(uint256 _amount) external nonReentrant isRunning(true) {\r\n        require(_amount > 0, \"Invalid amount\");\r\n\r\n        (uint256 _hmineValue, uint256 _price) = _getBuyValue(_amount);\r\n\r\n        // Used to send funds to the appropriate wallets and update global data\r\n        _buyInternal(msg.sender, _amount, _hmineValue, _price);\r\n\r\n        emit Buy(msg.sender, _hmineValue, _price);\r\n    }\r\n\r\n    // Used to send funds to the appropriate wallets and update global data\r\n    // The buy and compound function calls this internal function.\r\n    function _buyInternal(\r\n        address _sender,\r\n        uint256 _amount,\r\n        uint256 _hmineValue,\r\n        uint256 _price\r\n    ) internal {\r\n        // Checks to make sure supply is not exeeded.\r\n        require(totalSold + _hmineValue <= maxSupply, \"Exceeded supply\");\r\n\r\n        // Sends 7.5% / 4 to Loft, Ghost, Mike, Miko\r\n        uint256 _managementAmount = ((_amount * 75) / 1000) / 4;\r\n\r\n        // Sends 2.5% to SafeHolders\r\n        uint256 _safeHoldersAmount = (_amount * 25) / 1000;\r\n\r\n        // Sends 80% to bankroll\r\n        uint256 _bankrollAmount = (_amount * 80) / 100;\r\n\r\n        // Sends or keeps 10% to/in the contract for divs\r\n        uint256 _amountToStakers = _amount -\r\n            (4 * _managementAmount + _safeHoldersAmount + _bankrollAmount);\r\n\r\n        if (_sender == address(this)) {\r\n            for (uint256 _i = 0; _i < 4; _i++) {\r\n                IERC20(currencyToken).safeTransfer(\r\n                    management[_i],\r\n                    _managementAmount\r\n                );\r\n            }\r\n            IERC20(currencyToken).safeTransfer(safeHolders, _safeHoldersAmount);\r\n            IERC20(currencyToken).safeTransfer(bankroll, _bankrollAmount);\r\n        } else {\r\n            for (uint256 _i = 0; _i < 4; _i++) {\r\n                IERC20(currencyToken).safeTransferFrom(\r\n                    _sender,\r\n                    management[_i],\r\n                    _managementAmount\r\n                );\r\n            }\r\n            IERC20(currencyToken).safeTransferFrom(\r\n                _sender,\r\n                safeHolders,\r\n                _safeHoldersAmount\r\n            );\r\n            IERC20(currencyToken).safeTransferFrom(\r\n                _sender,\r\n                bankroll,\r\n                _bankrollAmount\r\n            );\r\n            IERC20(currencyToken).safeTransferFrom(\r\n                _sender,\r\n                address(this),\r\n                _amountToStakers\r\n            );\r\n        }\r\n\r\n        _distributeRewards(_amountToStakers);\r\n\r\n        // Update user's stake entry.\r\n        uint256 _index = _assignUserIndex(msg.sender);\r\n        users[_index].user = msg.sender; // just in case it was not yet initialized\r\n        _collectsUserRewardAndUpdatesBalance(\r\n            users[_index],\r\n            int256(_hmineValue)\r\n        );\r\n\r\n        // Update global values.\r\n        totalSold += _hmineValue;\r\n        totalStaked += _hmineValue;\r\n        currentPrice = _price;\r\n        rewardTotal += _amountToStakers;\r\n    }\r\n\r\n    // Sell HMINE for DAI\r\n    function sell(uint256 _amount) external nonReentrant isRunning(true) {\r\n        require(_amount > 0, \"Invalid amount\");\r\n\r\n        (uint256 _sellValue, uint256 _price) = _getSellValue(_amount);\r\n\r\n        // Sends HMINE to contract\r\n        IERC20(hmineToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        uint256 _60percent = (_sellValue * 60) / 100;\r\n\r\n        // Checks to make sure there is enough dai on contract to fullfill the swap.\r\n        uint256 _balance = IERC20(currencyToken).balanceOf(address(this));\r\n        uint256 _available = _balance - rewardTotal;\r\n        require(_60percent <= _available, \"Insufficient DAI on Contract\");\r\n\r\n        // Send DAI to user.  User only get's 60% of the selling price.\r\n        IERC20(currencyToken).safeTransfer(msg.sender, _60percent);\r\n\r\n        // Update global values.\r\n        totalSold -= _amount;\r\n        currentPrice = _price;\r\n\r\n        emit Sell(msg.sender, _amount, _price);\r\n    }\r\n\r\n    // Stake HMINE\r\n    function stake(uint256 _amount) external nonReentrant isRunning(true) {\r\n        require(_amount > 0, \"Invalid amount\");\r\n        uint256 _index = _assignUserIndex(msg.sender);\r\n        users[_index].user = msg.sender; // just in case it was not yet initialized\r\n\r\n        // User sends HMINE to the contract to stake\r\n        IERC20(hmineToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Update user's staking amount\r\n        _collectsUserRewardAndUpdatesBalance(users[_index], int256(_amount));\r\n        // Update total staking amount\r\n        totalStaked += _amount;\r\n    }\r\n\r\n    // Unstake HMINE\r\n    function unstake(uint256 _amount) external nonReentrant isRunning(true) {\r\n        require(_amount > 0, \"Invalid amount\");\r\n        uint256 _index = userIndex[msg.sender];\r\n        require(_index != 0, \"Not staked yet\");\r\n        require(users[_index].amount >= _amount, \"Inefficient stake balance\");\r\n\r\n        uint256 _10percent = (_amount * 10) / 100;\r\n        uint256 _80percent = _amount - 2 * _10percent;\r\n\r\n        // Goes to burn address\r\n        IERC20(hmineToken).safeTransfer(FURNACE, _10percent);\r\n        // Goes to bankroll\r\n        IERC20(hmineToken).safeTransfer(bankroll, _10percent);\r\n        // User only gets 80% HMINE\r\n        IERC20(hmineToken).safeTransfer(msg.sender, _80percent);\r\n\r\n        // Update user's staking amount\r\n        _collectsUserRewardAndUpdatesBalance(users[_index], -int256(_amount));\r\n        // Update total staking amount\r\n        totalStaked -= _amount;\r\n    }\r\n\r\n    // Adds a nickname to the user.\r\n    function updateNickname(string memory _nickname) external {\r\n        uint256 _index = userIndex[msg.sender];\r\n        require(index != 0, \"User does not exist\");\r\n        users[_index].nickname = _nickname;\r\n    }\r\n\r\n    // Claim DIV as DAI\r\n    function claim() external nonReentrant {\r\n        uint256 _index = userIndex[msg.sender];\r\n        require(index != 0, \"User does not exist\");\r\n        _collectsUserRewardAndUpdatesBalance(users[_index], 0);\r\n        uint256 _claimAmount = users[_index].reward;\r\n        require(_claimAmount > 0, \"No rewards to claim\");\r\n        rewardTotal -= _claimAmount;\r\n        users[_index].reward = 0;\r\n        IERC20(currencyToken).safeTransfer(msg.sender, _claimAmount);\r\n    }\r\n\r\n    // Compound the divs.\r\n    // Uses the div to buy more HMINE internally by calling the _buyInternal.\r\n    function compound() external nonReentrant isRunning(true) {\r\n        uint256 _index = userIndex[msg.sender];\r\n        require(index != 0, \"User does not exist\");\r\n        _collectsUserRewardAndUpdatesBalance(users[_index], 0);\r\n        uint256 _claimAmount = users[_index].reward;\r\n        require(_claimAmount > 0, \"No rewards to claim\");\r\n        // Removes the the claim amount from total divs for tracing purposes.\r\n        rewardTotal -= _claimAmount;\r\n        // remove the div from the users reward pool.\r\n        users[_index].reward = 0;\r\n\r\n        (uint256 _hmineValue, uint256 _price) = _getBuyValue(_claimAmount);\r\n\r\n        _buyInternal(address(this), _claimAmount, _hmineValue, _price);\r\n\r\n        emit Compound(msg.sender, _hmineValue, _price);\r\n    }\r\n\r\n    // Reward giver sends bonus DIV to top 20 holders\r\n    function sendBonusDiv(\r\n        uint256 _amount,\r\n        address[] memory _topTen,\r\n        address[] memory _topTwenty\r\n    ) external onlyRewardGiver nonReentrant isRunning(true) {\r\n        require(_amount > 0, \"Invalid amount\");\r\n\r\n        // Admin sends div to the contract\r\n        IERC20(currencyToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        require(\r\n            _topTen.length == 10 && _topTwenty.length == 10,\r\n            \"Invalid arrays\"\r\n        );\r\n\r\n        // 75% split between topTen\r\n        uint256 _topTenAmount = ((_amount * 75) / 100) / 10;\r\n        // 25% split between topTwenty\r\n        uint256 _topTwentyAmount = ((_amount * 25) / 100) / 10;\r\n\r\n        for (uint256 _i = 0; _i < 10; _i++) {\r\n            uint256 _index = userIndex[_topTen[_i]];\r\n            require(_index != 0, \"A user doesn't exist\");\r\n            users[_index].reward += _topTenAmount;\r\n        }\r\n\r\n        for (uint256 _i = 0; _i < 10; _i++) {\r\n            uint256 _index = userIndex[_topTwenty[_i]];\r\n            require(_index != 0, \"A user doesn't exist\");\r\n            users[_index].reward += _topTwentyAmount;\r\n        }\r\n\r\n        uint256 _leftOver = _amount - 10 * (_topTenAmount + _topTwentyAmount);\r\n        users[userIndex[_topTen[0]]].reward += _leftOver;\r\n\r\n        rewardTotal += _amount;\r\n\r\n        emit BonusReward(_amount);\r\n    }\r\n\r\n    // Reward giver sends daily divs to all holders\r\n    function sendDailyDiv(uint256 _amount)\r\n        external\r\n        onlyRewardGiver\r\n        nonReentrant\r\n        isRunning(true)\r\n    {\r\n        require(_amount > 0, \"Invalid amount\");\r\n\r\n        // Admin sends div to the contract\r\n        IERC20(currencyToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        _distributeRewards(_amount);\r\n\r\n        rewardTotal += _amount;\r\n    }\r\n\r\n    // Calculates actual user reward balance\r\n    function userRewardBalance(address _userAddress)\r\n        external\r\n        view\r\n        returns (uint256 _reward)\r\n    {\r\n        User storage _user = users[userIndex[_userAddress]];\r\n        // The difference is the user's share of rewards distributed since the last collection\r\n        uint256 _newReward = (_user.amount * accRewardPerShare) /\r\n            1e12 -\r\n            userRewardDebt[_user.user];\r\n        return _user.reward + _newReward;\r\n    }\r\n\r\n    // Distributes reward amount to all users propotionally to their stake.\r\n    function _distributeRewards(uint256 _amount) internal {\r\n        accRewardPerShare += (_amount * 1e12) / totalStaked;\r\n    }\r\n\r\n    // Collects pending rewards and updates user balance.\r\n    function _collectsUserRewardAndUpdatesBalance(\r\n        User storage _user,\r\n        int256 _amountDelta\r\n    ) internal {\r\n        // The difference is the user's share of rewards distributed since the last collection/reset\r\n        uint256 _newReward = (_user.amount * accRewardPerShare) /\r\n            1e12 -\r\n            userRewardDebt[_user.user];\r\n        _user.reward += _newReward;\r\n        if (_amountDelta >= 0) {\r\n            _user.amount += uint256(_amountDelta);\r\n        } else {\r\n            _user.amount -= uint256(-_amountDelta);\r\n        }\r\n        // Resets user's reward debt so that the difference is zero\r\n        userRewardDebt[_user.user] = (_user.amount * accRewardPerShare) / 1e12;\r\n    }\r\n\r\n    // Show user by address\r\n    function getUserByAddress(address _userAddress)\r\n        external\r\n        view\r\n        returns (User memory _user)\r\n    {\r\n        return users[userIndex[_userAddress]];\r\n    }\r\n\r\n    // Show user by index\r\n    function getUserByIndex(uint256 _index)\r\n        external\r\n        view\r\n        returns (User memory _user)\r\n    {\r\n        return users[_index];\r\n    }\r\n\r\n    // Takes in a user address and finds an existing index that is corelated to the user.\r\n    // If index not found (ZERO) then it assigns an index to the user.\r\n    function _assignUserIndex(address _user) internal returns (uint256 _index) {\r\n        if (userIndex[_user] == 0) userIndex[_user] = ++index;\r\n        return userIndex[_user];\r\n    }\r\n\r\n    // Updates the management and reward giver address.\r\n    function updateStateAddresses(address _rewardGiver, address _bankRoll)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _bankRoll != address(0) && _bankRoll != address(this),\r\n            \"Invalid address\"\r\n        );\r\n        require(\r\n            _rewardGiver != address(0) && _rewardGiver != address(this),\r\n            \"Invalid address\"\r\n        );\r\n        bankroll = _bankRoll;\r\n        rewardGiver = _rewardGiver;\r\n    }\r\n\r\n    // Updates the management.\r\n    function updateManagement(address _management, uint256 _i)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _management != address(0) && _management != address(this),\r\n            \"Invalid address\"\r\n        );\r\n        require(_i < 4, \"Invalid entry\");\r\n        management[_i] = _management;\r\n    }\r\n\r\n    event Buy(address indexed _user, uint256 _amount, uint256 _price);\r\n    event Sell(address indexed _user, uint256 _amount, uint256 _price);\r\n    event Compound(address indexed _user, uint256 _amount, uint256 _price);\r\n    event BonusReward(uint256 _amount);\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/HmineSacrifice.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\ninterface IOraclePair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\ninterface IOracleTwap {\r\n    function consultAveragePrice(\r\n        address _pair,\r\n        address _token,\r\n        uint256 _amountIn\r\n    ) external view returns (uint256 _amountOut);\r\n\r\n    function updateAveragePrice(address _pair) external;\r\n}\r\n\r\ncontract HmineSacrifice is Ownable, ReentrancyGuard {\r\n    using Address for address payable;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct Sacrifice {\r\n        bool isEnabled;\r\n        bool isStable;\r\n        address oracleAddress;\r\n    }\r\n\r\n    struct User {\r\n        string nickname;\r\n        address user;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(address => Sacrifice) public sacrifices;\r\n    uint256 public startRoundOne = 0;\r\n    uint256 public startRoundTwo = 0;\r\n    uint256 constant roundPeriod = 48 hours;\r\n    uint256 public hminePerRound = 50000e18; // Hmine per round is 50K\r\n    uint256 public roundOneHmine;\r\n    uint256 public roundTwoHmine;\r\n    uint256 constant initPrice = 600; // The price is dvisible by 100.  So in this case 600 is actually $6.00\r\n    uint256 public index = 0;\r\n    mapping(address => uint256) userIndex;\r\n    mapping(uint256 => User) public users;\r\n    address payable public immutable sacrificesTo;\r\n    address public immutable wbnb;\r\n    address public twap;\r\n    uint256 public twapMax = 30;\r\n\r\n    constructor(\r\n        address payable _sacTo,\r\n        address _wbnb,\r\n        address _bnbLP,\r\n        address _twap\r\n    ) {\r\n        sacrificesTo = _sacTo;\r\n        wbnb = _wbnb;\r\n        twap = _twap;\r\n        _addSac(_wbnb, false, _bnbLP);\r\n    }\r\n\r\n    function getSacrificeInfo(address _token)\r\n        external\r\n        view\r\n        returns (Sacrifice memory)\r\n    {\r\n        return sacrifices[_token];\r\n    }\r\n\r\n    // Returns the users data by address lookup.\r\n    function getUserByAddress(address _user)\r\n        external\r\n        view\r\n        returns (User memory)\r\n    {\r\n        uint256 _index = userIndex[_user];\r\n        return users[_index];\r\n    }\r\n\r\n    // Returns the users data by Index.\r\n    function getUserByIndex(uint256 _index)\r\n        external\r\n        view\r\n        returns (User memory)\r\n    {\r\n        return users[_index];\r\n    }\r\n\r\n    // Returns the current round.\r\n    function getCurrentRound() external view returns (uint16) {\r\n        return _getCurrentRound();\r\n    }\r\n\r\n    function _getCurrentRound() internal view returns (uint16) {\r\n        if (startRoundTwo != 0 && block.timestamp <= startRoundTwo + roundPeriod && block.timestamp > startRoundTwo) return 2;\r\n        if (startRoundOne != 0 && block.timestamp <= startRoundOne + roundPeriod && block.timestamp >= startRoundOne) return 1;\r\n        return 0;\r\n    }\r\n\r\n    function updateNickname(string memory nickname) external {\r\n        uint256 _index = userIndex[msg.sender];\r\n        require(index != 0, \"User does not exist\");\r\n        users[_index].nickname = nickname;\r\n    }\r\n\r\n    function addToRoundTotal(uint256 _amount) internal {\r\n        if(_getCurrentRound() == 2){\r\n            roundTwoHmine += _amount;\r\n        }\r\n        else {\r\n            roundOneHmine += _amount;\r\n        }\r\n    }\r\n\r\n    function sacrificeERC20(address _token, uint256 _amount)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(hasSacrifice(_token), \"Sacrifice not supported\");\r\n        require(_amount > 0, \"Amount cannot be less than zero\");\r\n\r\n        uint256 price = initPrice;\r\n        if (\r\n            _getCurrentRound() == 2\r\n        ) {\r\n            price = initPrice + 50;\r\n        }\r\n\r\n        uint256 _hmineAmount;\r\n        if (sacrifices[_token].isStable) {\r\n            _hmineAmount = (_amount * 100) / price;\r\n        } else {\r\n            _hmineAmount =\r\n                (getAmountInStable(\r\n                    _token,\r\n                    sacrifices[_token].oracleAddress,\r\n                    _amount\r\n                ) * 100) /\r\n                price;\r\n        }\r\n\r\n        require(validateRound(_hmineAmount), \"Round ended or not started yet\");\r\n\r\n        uint256 _index = assignUserIndex(msg.sender);\r\n        users[_index].user = msg.sender;\r\n        users[_index].amount += _hmineAmount;\r\n        addToRoundTotal(_hmineAmount);\r\n        IERC20(_token).safeTransferFrom(msg.sender, sacrificesTo, _amount);\r\n\r\n        emit UserSacrifice(msg.sender, _token, _amount, _hmineAmount);\r\n    }\r\n\r\n    function sacrificeBNB() external payable nonReentrant {\r\n        uint256 _amount = msg.value;\r\n        require(hasSacrifice(wbnb), \"Sacrifice not supported\");\r\n        require(_amount > 0, \"Amount cannot be less than zero\");\r\n\r\n        uint256 price = initPrice;\r\n        if (\r\n            _getCurrentRound() == 2\r\n        ) {\r\n            price = initPrice + 50;\r\n        }\r\n\r\n        uint256 _hmineAmount = (getAmountInStable(\r\n            wbnb,\r\n            sacrifices[wbnb].oracleAddress,\r\n            _amount\r\n        ) * 100) / price;\r\n\r\n        require(validateRound(_hmineAmount), \"Round ended or not started yet\");\r\n\r\n        uint256 _index = assignUserIndex(msg.sender);\r\n        users[_index].user = msg.sender;\r\n        users[_index].amount += _hmineAmount;\r\n        addToRoundTotal(_hmineAmount);\r\n        sacrificesTo.sendValue(_amount);\r\n\r\n        emit UserSacrifice(msg.sender, wbnb, _amount, _hmineAmount);\r\n    }\r\n\r\n    function updateRoundMax(uint256 _max) external onlyOwner {\r\n        require(startRoundOne == 0 && startRoundTwo == 0, \"Cannot update after round started\");\r\n        hminePerRound = _max;\r\n    }\r\n\r\n    function updateTwap(address _twap) external onlyOwner {\r\n        require(address(0) != _twap, \"Cannot be contract.\");\r\n        twap = _twap;\r\n    }\r\n\r\n    function updateTwapMax(uint256 _twapMax) external onlyOwner {\r\n        require(_twapMax > 0, \"Cannot be less than zero\");\r\n        twapMax = _twapMax;\r\n    }\r\n\r\n    function startFirstRound(uint256 _time) external onlyOwner {\r\n        require(\r\n            startRoundOne > block.timestamp || startRoundOne == 0,\r\n            \"Rounds were already started\"\r\n        );\r\n        startRoundOne = _time;\r\n    }\r\n\r\n    function startSecondRound(uint256 _time) external onlyOwner {\r\n        require(_time > startRoundOne + roundPeriod && startRoundOne != 0, \"First round not started or ended\");\r\n        require(\r\n            startRoundTwo > block.timestamp || startRoundTwo == 0,\r\n            \"Rounds were already started\"\r\n        );\r\n        startRoundTwo = _time;\r\n    }\r\n\r\n    function addSacToken(\r\n        address _token,\r\n        bool _isStable,\r\n        address _lpAddress\r\n    ) external onlyOwner {\r\n        require(address(0) != _token, \"Cannot be contract.\");\r\n        require(!hasSacrifice(_token), \"Sacrifice is already supported\");\r\n\r\n        if (address(0) != _lpAddress) {\r\n            address _token0 = IOraclePair(_lpAddress).token0();\r\n            address _token1 = IOraclePair(_lpAddress).token1();\r\n            require(\r\n                (_token == _token0 || _token == _token1) &&\r\n                    IERC20Metadata(_token0).decimals() == 18 &&\r\n                    IERC20Metadata(_token1).decimals() == 18,\r\n                \"Invalid lp\"\r\n            );\r\n        } else {\r\n            require(IERC20Metadata(_token).decimals() == 18, \"Invalid decimal\");\r\n        }\r\n\r\n        _addSac(_token, _isStable, _lpAddress);\r\n    }\r\n\r\n    function updateSacrifice(\r\n        address _token,\r\n        bool _isStable,\r\n        address _lpAddress\r\n    ) public onlyOwner {\r\n        require(hasSacrifice(_token), \"Sacrifice not supported\");\r\n        address _token0 = IOraclePair(_lpAddress).token0();\r\n        address _token1 = IOraclePair(_lpAddress).token1();\r\n        require(\r\n            (_token == _token0 || _token == _token1) &&\r\n                IERC20Metadata(_token0).decimals() == 18 &&\r\n                IERC20Metadata(_token1).decimals() == 18,\r\n            \"Invalid lp\"\r\n        );\r\n        sacrifices[_token].isStable = _isStable;\r\n        sacrifices[_token].oracleAddress = _lpAddress;\r\n    }\r\n\r\n    function removeSacrifice(address _token) external onlyOwner {\r\n        require(hasSacrifice(_token), \"Sacrifice not supported\");\r\n        delete sacrifices[_token];\r\n    }\r\n\r\n    // Checks if token is a supported asset to sacrifice.\r\n    function hasSacrifice(address _token) internal view returns (bool) {\r\n        return sacrifices[_token].isEnabled;\r\n    }\r\n\r\n    function _addSac(\r\n        address _token,\r\n        bool _isStable,\r\n        address _lpAddress\r\n    ) internal {\r\n        sacrifices[_token] = Sacrifice(true, _isStable, _lpAddress);\r\n    }\r\n\r\n    // Takes in a user address and finds an existing index that is corelated to the user.\r\n    // If index not found (ZERO) then it assigns an index to the user.\r\n    function assignUserIndex(address _user) internal returns (uint256) {\r\n        if (userIndex[_user] == 0) userIndex[_user] = ++index;\r\n        return userIndex[_user];\r\n    }\r\n\r\n    // If token is not a stable token, use this to find the price for the token.\r\n    // This uses an active LP approach.\r\n    function getAmountInStable(\r\n        address _token,\r\n        address _lp,\r\n        uint256 _amount\r\n    ) internal returns (uint256 _price) {\r\n        IOraclePair LP = IOraclePair(_lp);\r\n        (uint256 reserve0, uint256 reserve1, ) = LP.getReserves();\r\n        address token0 = LP.token0();\r\n        if (token0 == _token) {\r\n            _price = (reserve1 * _amount) / reserve0;\r\n        } else {\r\n            _price = (reserve0 * _amount) / reserve1;\r\n        }\r\n\r\n        // twap protection\r\n        IOracleTwap(twap).updateAveragePrice(_lp);\r\n        uint256 twapPrice = IOracleTwap(twap).consultAveragePrice(\r\n            _lp,\r\n            _token,\r\n            _amount\r\n        );\r\n        require(\r\n            _price < (twapPrice * (1000 + twapMax)) / 1000,\r\n            \"TWAP Price Error\"\r\n        );\r\n    }\r\n\r\n    /* Check to make sure that conditions are met for the transaction to go through.\r\n     ** Cannot start sacrifice unless startTime has been specified.\r\n     ** Cannot sacrifice for anymore if 50K HMINE met before round 1 ends.\r\n     ** Cannot sacrifice if 100K HMINE met or round2 ends.\r\n     */\r\n    function validateRound(uint256 _hmineAmount) internal view returns (bool) {\r\n        // Rounds have not started yet or have already ended.\r\n        if (_getCurrentRound() == 0) return false;\r\n\r\n        //  Round one started but not ended yet\r\n        if (\r\n            _getCurrentRound() == 1\r\n        ) {\r\n            if(roundOneHmine + _hmineAmount > hminePerRound) return false;\r\n        }\r\n\r\n        // Round two started but not ended\r\n        if (\r\n            _getCurrentRound() == 2\r\n        ) {\r\n            if(roundTwoHmine + _hmineAmount > hminePerRound) return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    event UserSacrifice(\r\n        address indexed _user,\r\n        address indexed _token,\r\n        uint256 _amount,\r\n        uint256 _hmineAmount\r\n    );\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/HmineToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.9;\r\n\r\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract HmineToken is ERC20(\"HYPERMINE Token\", \"HMINE\")\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\t_mint(msg.sender, 200_000e18);\r\n\t}\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/interfaces/IOraclePair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\ninterface IOraclePair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/interfaces/IOracleTwap.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\ninterface IOracleTwap {\r\n    function consultCurrentPrice(\r\n        address _pair,\r\n        address _token,\r\n        uint256 _amountIn\r\n    ) external view returns (uint256 _amountOut);\r\n\r\n    function consultAveragePrice(\r\n        address _pair,\r\n        address _token,\r\n        uint256 _amountIn\r\n    ) external view returns (uint256 _amountOut);\r\n\r\n    function updateAveragePrice(address _pair) external;\r\n}\r\n"
    },
    "contracts/Migrations.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\ncontract Migrations {\r\n  address public owner = msg.sender;\r\n  uint public last_completed_migration;\r\n\r\n  modifier restricted() {\r\n    require(\r\n      msg.sender == owner,\r\n      \"This function is restricted to the contract's owner\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  function setCompleted(uint completed) public restricted {\r\n    last_completed_migration = completed;\r\n  }\r\n}\r\n"
    },
    "contracts/test/MockDai.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.9;\r\n\r\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockDai is ERC20(\"Mock Dai\", \"DAI\")\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\t_mint(msg.sender, 1_000_000_000e18);\r\n\t}\r\n}"
    },
    "contracts/test/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\ncontract MockERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(amount)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(subtractedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            msg.sender,\r\n            _allowances[account][msg.sender].sub(amount)\r\n        );\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "contracts/test/MockOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\ncontract MockOracle {\r\n    address private pair;\r\n\r\n    // view functions\r\n    function consultCurrentPrice(\r\n        address _pair,\r\n        address _token,\r\n        uint256 _amountIn\r\n    ) external view returns (uint256 _amountOut){\r\n        return _amountIn * 294;\r\n    }\r\n\r\n    function consultAveragePrice(\r\n        address _pair,\r\n        address _token,\r\n        uint256 _amountIn\r\n    ) external view returns (uint256 _amountOut){\r\n        return _amountIn * 294;\r\n    }\r\n\r\n    // open functions\r\n    function updateAveragePrice(address _pair) external {\r\n        pair = _pair;\r\n    }\r\n  \r\n}\r\n"
    },
    "contracts/test/MockOraclePair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract MockOraclePair {\r\n    using SafeMath for uint256;\r\n\r\n    address public token0;\r\n    address public token1;\r\n\r\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\r\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        )\r\n    {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    constructor(address _token0, address _token1) {\r\n        token0 = _token0; // WBNB\r\n        token1 = _token1; // BUSD\r\n        reserve1 = 300e18;\r\n        reserve0 = 1e18;\r\n    }\r\n}\r\n"
    },
    "contracts/test/MockToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\nimport \"./MockERC20.sol\";\r\n\r\ncontract MockToken is MockERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _mint(msg.sender, 1000000e18);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function mint(address to, uint256 value) external {\r\n        require(\r\n            value <= type(uint128).max - totalSupply(),\r\n            \"Token1: Total supply exceeded max limit.\"\r\n        );\r\n        require(\r\n            value <= type(uint128).max - balanceOf(to),\r\n            \"Token1: Balance of minter exceeded max limit.\"\r\n        );\r\n        _mint(to, value);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": false
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}